# Microframework PHP + Next.js

Este projeto √© um sistema fullstack simples utilizando **PHP puro** (sem frameworks) no backend e **Next.js** no frontend. O backend gerencia usu√°rios, clientes e endere√ßos; e o frontend consome as rotas via API REST.

---

## ‚öôÔ∏è Pr√©-requisitos

- PHP 8+
- Composer
- Node.js + NPM
- MySQL

---

## ‚ú® Passo a Passo para subir o projeto

## Clonando o Reposit√≥rio

Para clonar este projeto, use o seguinte comando:

```bash
git clone https://github.com/Claudio-16dv/AdminPortal.git

---

### 1.Configure o arquivo `.env`

Crie o arquivo `.env` na raiz com base no exemplo abaixo:

```dotenv
DB_HOST=localhost
DB_DATABASE=microframework
DB_USERNAME=root
DB_PASSWORD=root
```

---

### 2.Instale as depend√™ncias do PHP

```bash
composer install
```

---

### 3.Rode as migrations

Cria o schema, tabelas no banco e popula com:

- 1 usu√°rio
- 3 clientes
- 3 endere√ßos

```bash
composer migrate
```

---

### 4.Configure e inicie o frontend

```bash
cd frontend
npm install
npm run dev
```

> O frontend estar√° dispon√≠vel em: `http://localhost:3001` ou `http://localhost:3000

---

### 5.Inicie o backend PHP

Na raiz do projeto:

```bash
composer start
```

> O backend estar√° rodando em: `http://localhost:8000`

---

### 5.Inicie os testes automatizados (Ele apaga os registros dos clientes e endere√ßos do banco)

Para rodar os testes automatizados, execute o seguinte comando na raiz do projeto:

```bash
composer test
```
O que acontece ao rodar o comando:
O comando executa os testes automatizados utilizando o PHPUnit.

Todos os testes de cria√ß√£o, atualiza√ß√£o, exclus√£o e valida√ß√£o de clientes e endere√ßos ser√£o executados.

Importante: O processo de teste apaga os registros de clientes e endere√ßos do banco de dados ao final de cada teste para garantir que o ambiente de testes esteja sempre limpo para execu√ß√µes futuras.

---

## üë§ Usu√°rio de Teste

Use este usu√°rio no login para testar a aplica√ß√£o:

```text
Email: john@example.com
Senha: C_123456
```
---

## ‚úÖ Funcionalidades

- Autentica√ß√£o com login e cadastro
- CRUD de clientes com m√∫ltiplos endere√ßos
- Valida√ß√£o no frontend e backend
- Toasts com mensagens de sucesso e erro
- Middleware de CORS e autentica√ß√£o


